#Replace with XAML generated by Visual Studio
$inputXAML = @'
<Window x:Class="WpfApplication4.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfApplication4"
        mc:Ignorable="d"
        Title="SampleForm" Height="169.025" Width="257.805" Topmost="True">
    <Grid>
        <Button x:Name="button" Content="Button" Margin="10,0,0,10" VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="90" Height="29"/>
        <Button x:Name="button2" Content="Close" Margin="0,0,10,10" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="90" Height="29"/>
        <TextBox x:Name="textBox" Margin="10,10,10,44" TextWrapping="Wrap" Text="TextBox"/>
    </Grid>
</Window>
'@

#region -[Dont mess with this region]-

$inputXAML = $inputXAML -replace 'mc:Ignorable="d"','' -replace "x:N",'N' -replace '^<Win.*', '<Window'
[void][System.Reflection.Assembly]::LoadWithPartialName('presentationframework')
[xml]$XML = $inputXAML

#Read converted XAML
$reader=(New-Object System.Xml.XmlNodeReader $XML) 
try{
    $Form=[Windows.Markup.XamlReader]::Load( $reader )
}
catch [System.Management.Automation.MethodInvocationException] {
    Write-Warning 'Issue with XAML.  Check the syntax for this control...'
    Write-Host $error[0].Exception.Message -ForegroundColor Red
    if ($error[0].Exception.Message -like "*button*"){
        Write-Warning 'Ensure your button in the $inputXAML does NOT have a `Click=ButtonClick` property.'
    }
}
catch{
    Write-Output 'Unable to load Windows.Markup.XamlReader. Double-check syntax and ensure .net is installed.'
}
 
#Store form nodes as PowerShell variables and append with WPF 
$XML.SelectNodes("//*[@Name]") | ForEach{Set-Variable -Name "WPF$($_.Name)" -Value $Form.FindName($_.Name)}

#endregion
 
 
#region -[Powershell code used to interact with GUI]-
                                                                       
#List all variables found in form
Function Get-FormVariables{
    $WPFVars = Get-Variable WPF*
    if ($WPFVars){$WPFVars}
    else{Write-Warning 'No WPF variables found'}
}
 
Get-FormVariables

#Add an on click action to Button
$WPFbutton.add_click({
    #Change the text in the textbox
    $WPFtextBox.Text = 'Stop pushing my buttons.'
})

#Add an on click action to Button2
$WPFbutton2.add_click({
    #Close the form
    $form.close()
})

#endregion

#Shows the form
$Form.ShowDialog() | out-null